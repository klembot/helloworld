import clsx from 'clsx';
import * as React from 'react';
import './weather-icon.css';

const emojiMappings = {
	day: {
		bkn: 'üå•',
		blizzard: 'üå®',
		cold: 'ü•∂',
		du: 'üå´',
		fc: 'üå™',
		few: '‚òÄÔ∏è',
		fg: 'üå´',
		frza: 'üßä',
		fu: 'üå´',
		hi_shwrs: 'üåß',
		hi_tsra: '‚õà',
		hur_warn: 'üå™',
		hur_watch: 'üå™',
		hot: 'üî•',
		hz: 'üå´',
		ip: 'üßä',
		minus_ra: 'üåß',
		ovc: '‚òÅÔ∏è',
		ra: 'üåß',
		rain_showers: 'üåß',
		raip: '‚ùÑÔ∏è',
		ra_fzra: 'üßä',
		ra_sn: 'üå®',
		sct: 'üå§',
		scttsra: '‚õà',
		shra: 'üåß',
		sn: 'üå®',
		skc: '‚òÄÔ∏è',
		snip: 'üå®',
		tor: 'üå™',
		tsra: '‚õà',
		tsra_sct: '‚õà',
		tsra_hi: '‚õà',
		ts_nowarn: '‚õà',
		ts_warn: '‚õà',
		ts_watch: '‚õà',
		wind_bkn: 'üå¨',
		wind_few: 'üå¨',
		wind_ovc: 'üå¨',
		wind_sct: 'üå¨',
		wind_skc: 'üå¨'
	},
	night: {
		bkn: '‚òÅÔ∏è',
		blizzard: 'üå®',
		cold: 'ü•∂',
		du: 'üå´',
		fc: 'üå™',
		few: '‚ú®',
		fg: 'üå´',
		frza: 'üßä',
		fu: 'üå´',
		hi_shwrs: 'üåß',
		hi_tsra: '‚õà',
		hur_warn: 'üå™',
		hur_watch: 'üå™',
		ip: 'üßä',
		minus_ra: 'üåß',
		ovc: '‚òÅÔ∏è',
		ra: 'üåß',
		rain_showers: 'üåß',
		raip: '‚ùÑÔ∏è',
		ra_fzra: 'üßä',
		ra_sn: 'üå®',
		sct: '‚òÅÔ∏è',
		scttsra: '‚õà',
		shra: 'üåß',
		skc: '‚ú®',
		sn: 'üå®',
		snip: 'üå®',
		tor: 'üå™',
		tsra: '‚õà',
		tsra_sct: '‚õà',
		tsra_hi: '‚õà',
		ts_nowarn: '‚õà',
		ts_warn: '‚õà',
		ts_watch: '‚õà',
		wind_bkn: 'üå¨',
		wind_few: 'üå¨',
		wind_ovc: 'üå¨',
		wind_sct: 'üå¨',
		wind_skc: 'üå¨'
	}
};

export interface WeatherIconProps {
	/**
	 * NWS icon path to render.
	 * @see https://www.weather.gov/forecast-icons
	 */
	icon: string;

	size?: 'medium' | 'large';
}

export const WeatherIcon = ({icon, size}: WeatherIconProps) => {
	const [iconType, ...iconKeys] = icon
		.replace('https://api.weather.gov/icons/land/', '')
		.replace(/\?.*$/, '')
		.split('/');

	if (iconType in emojiMappings) {
		return (
			<div
				className={clsx('weather-icon', {
					multiple: iconKeys.length > 1,
					[size as string]: true
				})}
			>
				{iconKeys.map(iconKey => {
					const [icon, percent] = iconKey.split(',');
					const emoji =
						(emojiMappings as any)[iconType][icon] ?? '‚ùì';

					return (
						<div
							className={clsx('icon', {'has-percent': !!percent})}
							key={iconKey}
						>
							{emoji}
						</div>
					);
				})}
			</div>
		);
	}

	console.error(`Don't know how to handle icon type ${iconType}`);
	return <span className="weather-icon">‚ùì</span>;
};
